lrwxrwxrwx 1 josele josele     6 sep 25 11:55 sums.cc -> sum.cc
josele@josele-VB:~/Escritorio/Practica 1 - EC-/pccito/1$ ls -la
total 236
drwxr-xr-x 2 josele josele  4096 sep 25 13:24 .
drwxrwxr-x 3 josele josele  4096 sep 25 11:53 ..
-rw-r--r-- 1 josele josele   310 sep 18 10:42 bug.cc
-rwxrwxr-x 1 josele josele  1008 sep 25 12:45 hola
-rwxrwxr-x 1 josele josele  1204 sep 25 13:16 hola32
-rw-rw-r-- 1 josele josele  1360 sep 25 13:16 hola32.o
-rwxrwxr-x 1 josele josele  1076 sep 25 13:24 hola32p
-rw-rw-r-- 1 josele josele  1260 sep 25 13:24 hola32p.o
-rw-r--r-- 1 josele josele   726 sep 18 10:42 hola32p.s
-rw-r--r-- 1 josele josele   611 sep 18 10:42 hola32.s
-rwxrwxr-x 1 josele josele  1680 sep 25 13:24 hola64
-rwxrwxr-x 1 josele josele  6864 sep 25 13:24 hola64-c
-rw-rw-r-- 1 josele josele  1984 sep 25 13:24 hola64-c.o
-rw-r--r-- 1 josele josele   371 sep 18 10:42 hola64-c.s
-rw-rw-r-- 1 josele josele  2040 sep 25 13:24 hola64.o
-rwxrwxr-x 1 josele josele  1488 sep 25 13:24 hola64p
-rw-rw-r-- 1 josele josele  1864 sep 25 13:24 hola64p.o
-rw-r--r-- 1 josele josele   849 sep 18 10:42 hola64p.s
-rw-r--r-- 1 josele josele   504 sep 18 10:42 hola64.s
-rwxrwxr-x 1 josele josele  9664 sep 25 13:08 hola-c
-rwxrwxr-x 1 josele josele 27576 sep 25 13:03 hola-c++
-rw-rw-r-- 1 josele josele  8229 sep 25 13:10 hola-c.att
-rw-r--r-- 1 josele josele    75 sep 18 10:42 hola-c.c
-rw-r--r-- 1 josele josele    93 sep 18 10:42 hola-c++.cc
-rw-rw-r-- 1 josele josele   992 sep 25 12:45 hola.o
lrwxrwxrwx 1 josele josele     8 sep 25 11:55 hola.s -> hola32.s
-rw-rw-r-- 1 josele josele   692 sep 25 13:07 kk
-rw-r--r-- 1 josele josele  1903 sep 18 10:42 makefile
-rwxrwxr-x 1 josele josele  8552 sep 25 12:25 minimo
-rw-r--r-- 1 josele josele    14 sep 18 10:42 minimo1.c
-rw-r--r-- 1 josele josele    25 sep 18 10:42 minimo2.c
-rw-r--r-- 1 josele josele    44 sep 18 10:42 minimo3.c
lrwxrwxrwx 1 josele josele     9 sep 25 11:55 minimo-c.c -> minimo1.c
lrwxrwxrwx 1 josele josele     9 sep 25 11:55 minimo-c++.cc -> minimo1.c
-rw-r--r-- 1 josele josele   764 sep 18 10:42 printf32e.s
-rw-r--r-- 1 josele josele   738 sep 18 10:42 printf32.s
-rwxrwxr-x 1 josele josele  6888 sep 25 13:24 printf64
-rw-rw-r-- 1 josele josele  2032 sep 25 13:24 printf64.o
-rw-r--r-- 1 josele josele   623 sep 18 10:42 printf64.s
-rwxrwxr-x 1 josele josele  9704 sep 25 13:24 printf-c-1
-rw-r--r-- 1 josele josele    84 sep 18 10:42 printf-c-1.c
-rwxrwxr-x 1 josele josele  9840 sep 25 13:24 printf-c-2
-rw-r--r-- 1 josele josele   109 sep 18 10:42 printf-c-2.c
lrwxrwxrwx 1 josele josele     6 sep 25 11:55 sum0.cc -> sum.cc
lrwxrwxrwx 1 josele josele     6 sep 25 11:55 sum1.cc -> sum.cc
lrwxrwxrwx 1 josele josele     6 sep 25 11:55 sum2.cc -> sum.cc
lrwxrwxrwx 1 josele josele     6 sep 25 11:55 sum3.cc -> sum.cc
-rw-r--r-- 1 josele josele  1046 sep 18 10:42 sum.cc
lrwxrwxrwx 1 josele josele     6 sep 25 11:55 sums.cc -> sum.cc
josele@josele-VB:~/Escritorio/Practica 1 - EC-/pccito/1$ file 
Usage: file [-bcEhikLlNnprsvzZ0] [--apple] [--extension] [--mime-encoding] [--mime-type]
            [-e testname] [-F separator] [-f namefile] [-m magicfiles] file ...
       file -C [-m magicfiles]
       file [--help]
josele@josele-VB:~/Escritorio/Practica 1 - EC-/pccito/1$ clear 

josele@josele-VB:~/Escritorio/Practica 1 - EC-/pccito/1$ as hola.s -o hola.o
josele@josele-VB:~/Escritorio/Practica 1 - EC-/pccito/1$ ls -l
total 228
-rw-r--r-- 1 josele josele   310 sep 18 10:42 bug.cc
-rwxrwxr-x 1 josele josele  1008 sep 25 12:45 hola
-rwxrwxr-x 1 josele josele  1204 sep 25 13:16 hola32
-rw-rw-r-- 1 josele josele  1360 sep 25 13:16 hola32.o
-rwxrwxr-x 1 josele josele  1076 sep 25 13:24 hola32p
-rw-rw-r-- 1 josele josele  1260 sep 25 13:24 hola32p.o
-rw-r--r-- 1 josele josele   726 sep 18 10:42 hola32p.s
-rw-r--r-- 1 josele josele   611 sep 18 10:42 hola32.s
-rwxrwxr-x 1 josele josele  1680 sep 25 13:24 hola64
-rwxrwxr-x 1 josele josele  6864 sep 25 13:24 hola64-c
-rw-rw-r-- 1 josele josele  1984 sep 25 13:24 hola64-c.o
-rw-r--r-- 1 josele josele   371 sep 18 10:42 hola64-c.s
-rw-rw-r-- 1 josele josele  2040 sep 25 13:24 hola64.o
-rwxrwxr-x 1 josele josele  1488 sep 25 13:24 hola64p
-rw-rw-r-- 1 josele josele  1864 sep 25 13:24 hola64p.o
-rw-r--r-- 1 josele josele   849 sep 18 10:42 hola64p.s
-rw-r--r-- 1 josele josele   504 sep 18 10:42 hola64.s
-rwxrwxr-x 1 josele josele  9664 sep 25 13:08 hola-c
-rwxrwxr-x 1 josele josele 27576 sep 25 13:03 hola-c++
-rw-rw-r-- 1 josele josele  8229 sep 25 13:10 hola-c.att
-rw-r--r-- 1 josele josele    75 sep 18 10:42 hola-c.c
-rw-r--r-- 1 josele josele    93 sep 18 10:42 hola-c++.cc
-rw-rw-r-- 1 josele josele   992 oct  1 13:39 hola.o
lrwxrwxrwx 1 josele josele     8 sep 25 11:55 hola.s -> hola32.s
-rw-rw-r-- 1 josele josele   692 sep 25 13:07 kk
-rw-r--r-- 1 josele josele  1903 sep 18 10:42 makefile
-rwxrwxr-x 1 josele josele  8552 sep 25 12:25 minimo
-rw-r--r-- 1 josele josele    14 sep 18 10:42 minimo1.c
-rw-r--r-- 1 josele josele    25 sep 18 10:42 minimo2.c
-rw-r--r-- 1 josele josele    44 sep 18 10:42 minimo3.c
lrwxrwxrwx 1 josele josele     9 sep 25 11:55 minimo-c.c -> minimo1.c
lrwxrwxrwx 1 josele josele     9 sep 25 11:55 minimo-c++.cc -> minimo1.c
-rw-r--r-- 1 josele josele   764 sep 18 10:42 printf32e.s
-rw-r--r-- 1 josele josele   738 sep 18 10:42 printf32.s
-rwxrwxr-x 1 josele josele  6888 sep 25 13:24 printf64
-rw-rw-r-- 1 josele josele  2032 sep 25 13:24 printf64.o
-rw-r--r-- 1 josele josele   623 sep 18 10:42 printf64.s
-rwxrwxr-x 1 josele josele  9704 sep 25 13:24 printf-c-1
-rw-r--r-- 1 josele josele    84 sep 18 10:42 printf-c-1.c
-rwxrwxr-x 1 josele josele  9840 sep 25 13:24 printf-c-2
-rw-r--r-- 1 josele josele   109 sep 18 10:42 printf-c-2.c
lrwxrwxrwx 1 josele josele     6 sep 25 11:55 sum0.cc -> sum.cc
lrwxrwxrwx 1 josele josele     6 sep 25 11:55 sum1.cc -> sum.cc
lrwxrwxrwx 1 josele josele     6 sep 25 11:55 sum2.cc -> sum.cc
lrwxrwxrwx 1 josele josele     6 sep 25 11:55 sum3.cc -> sum.cc
-rw-r--r-- 1 josele josele  1046 sep 18 10:42 sum.cc
lrwxrwxrwx 1 josele josele     6 sep 25 11:55 sums.cc -> sum.cc
josele@josele-VB:~/Escritorio/Practica 1 - EC-/pccito/1$ gcc -nostdlib hola.s -o hola
josele@josele-VB:~/Escritorio/Practica 1 - EC-/pccito/1$ objdump -d hola

hola:     formato del fichero elf64-x86-64


Desensamblado de la sección .text:

000000000040010c <write>:
  40010c:	b8 04 00 00 00       	mov    $0x4,%eax
  400111:	bb 01 00 00 00       	mov    $0x1,%ebx
  400116:	b9 38 01 60 00       	mov    $0x600138,%ecx
  40011b:	8b 14 25 48 01 60 00 	mov    0x600148,%edx
  400122:	cd 80                	int    $0x80
  400124:	c3                   	retq   

0000000000400125 <exit>:
  400125:	b8 01 00 00 00       	mov    $0x1,%eax
  40012a:	31 db                	xor    %ebx,%ebx
  40012c:	cd 80                	int    $0x80

000000000040012e <_start>:
  40012e:	e8 d9 ff ff ff       	callq  40010c <write>
  400133:	e8 ed ff ff ff       	callq  400125 <exit>
josele@josele-VB:~/Escritorio/Practica 1 - EC-/pccito/1$ gdb 
GNU gdb (Ubuntu 7.11.1-0ubuntu1~16.5) 7.11.1
Copyright (C) 2016 Free Software Foundation, Inc.
License GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.  Type "show copying"
and "show warranty" for details.
This GDB was configured as "x86_64-linux-gnu".
Type "show configuration" for configuration details.
Para las instrucciones de informe de errores, vea:
<http://www.gnu.org/software/gdb/bugs/>.
Find the GDB manual and other documentation resources online at:
<http://www.gnu.org/software/gdb/documentation/>.
For help, type "help".
Type "apropos word" to search for commands related to "word".
(gdb) q
josele@josele-VB:~/Escritorio/Practica 1 - EC-/pccito/1$ gdb hola
hola      hola32    hola32p   hola64    hola64-c  hola64p   hola-c    hola-c++
josele@josele-VB:~/Escritorio/Practica 1 - EC-/pccito/1$ gdb hola
hola      hola32    hola32p   hola64    hola64-c  hola64p   hola-c    hola-c++
josele@josele-VB:~/Escritorio/Practica 1 - EC-/pccito/1$ gdb hola
hola      hola32    hola32p   hola64    hola64-c  hola64p   hola-c    hola-c++
josele@josele-VB:~/Escritorio/Practica 1 - EC-/pccito/1$ gdb hola32
GNU gdb (Ubuntu 7.11.1-0ubuntu1~16.5) 7.11.1
Copyright (C) 2016 Free Software Foundation, Inc.
License GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.  Type "show copying"
and "show warranty" for details.
This GDB was configured as "x86_64-linux-gnu".
Type "show configuration" for configuration details.
Para las instrucciones de informe de errores, vea:
<http://www.gnu.org/software/gdb/bugs/>.
Find the GDB manual and other documentation resources online at:
<http://www.gnu.org/software/gdb/documentation/>.
For help, type "help".
Type "apropos word" to search for commands related to "word"...
Leyendo símbolos desde hola32...hecho.
(gdb) list
1	.data                     # datos
2	msg:    .string "¡hola, mundo!\n"
3	tam:    .int . - msg
4	
5	.text                     # código
6	        .globl _start     # empezar aquí
7	
8	write:  movl  $4, %eax    # write
9	        movl  $1, %ebx    # salida estándar
10	        movl  $msg, %ecx  # cadena
(gdb) b hola32.s:9
Punto de interrupción 1 at 0x8048079: file hola32.s, line 9.
(gdb) run
Starting program: /home/josele/Escritorio/Practica 1 - EC-/pccito/1/hola32 

Breakpoint 1, write () at hola32.s:9
9	        movl  $1, %ebx    # salida estándar
(gdb) run
The program being debugged has been started already.
Start it from the beginning? (y or n) y
Starting program: /home/josele/Escritorio/Practica 1 - EC-/pccito/1/hola32 

Breakpoint 1, write () at hola32.s:9
9	        movl  $1, %ebx    # salida estándar
(gdb) next
10	        movl  $msg, %ecx  # cadena
(gdb) next
11	        movl  tam, %edx   # longitud
(gdb) next
12	        int   $0x80       # llamada a write
(gdb) next
¡hola, mundo!
write () at hola32.s:13
13	        ret               # retorno
(gdb) next
_start () at hola32.s:21
21	        call  exit        # llamada a función
(gdb) next
15	exit:   movl  $1, %eax    # exit
(gdb) next
16	        xorl  %ebx, %ebx  # 0
(gdb) next
17	        int   $0x80       # llamada a exit
(gdb) next
[Inferior 1 (process 3293) exited normally]
(gdb) q
josele@josele-VB:~/Escritorio/Practica 1 - EC-/pccito/1$ gdb hola64
GNU gdb (Ubuntu 7.11.1-0ubuntu1~16.5) 7.11.1
Copyright (C) 2016 Free Software Foundation, Inc.
License GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.  Type "show copying"
and "show warranty" for details.
This GDB was configured as "x86_64-linux-gnu".
Type "show configuration" for configuration details.
Para las instrucciones de informe de errores, vea:
<http://www.gnu.org/software/gdb/bugs/>.
Find the GDB manual and other documentation resources online at:
<http://www.gnu.org/software/gdb/documentation/>.
For help, type "help".
Type "apropos word" to search for commands related to "word"...
Leyendo símbolos desde hola64...hecho.
(gdb) run hola
hola         hola-c.att   hola32       hola32p.o    hola64-c.o   hola64p
hola-c       hola-c.c     hola32.o     hola32p.s    hola64-c.s   hola64p.o
hola-c++     hola.o       hola32.s     hola64       hola64.o     hola64p.s
hola-c++.cc  hola.s       hola32p      hola64-c     hola64.s     
(gdb) run hola64
hola64      hola64-c.o  hola64.o    hola64p     hola64p.s   
hola64-c    hola64-c.s  hola64.s    hola64p.o   
(gdb) run hola64
hola64      hola64-c.o  hola64.o    hola64p     hola64p.s   
hola64-c    hola64-c.s  hola64.s    hola64p.o   
(gdb) run hola64
Starting program: /home/josele/Escritorio/Practica 1 - EC-/pccito/1/hola64 hola64
¡hola, mundo!
[Inferior 1 (process 3306) exited normally]
(gdb) list 
1	.data
2	msg:    .string "¡hola, mundo!\n"
3	tam:    .quad . - msg
4	
5	.text
6	        .global _start
7	
8	write:  mov   $1, %rax    # write
9	        mov   $1, %rdi    # stdout
10	        mov   $msg, %rsi  # texto
(gdb) b
backtrace    bookmark     break        break-range  bt           
(gdb) b
backtrace    bookmark     break        break-range  bt           
(gdb) b hola64.s:9
Punto de interrupción 1 at 0x4000b7: file hola64.s, line 9.
(gdb) next
Este programa no está corriendo.
(gdb) run
Starting program: /home/josele/Escritorio/Practica 1 - EC-/pccito/1/hola64 hola64

Breakpoint 1, write () at hola64.s:9
9	        mov   $1, %rdi    # stdout
(gdb) next
10	        mov   $msg, %rsi  # texto
(gdb) next
11	        mov   tam,  %rdx  # tamaño
(gdb) next
12	        syscall           # llamada a write
(gdb) next
¡hola, mundo!
write () at hola64.s:13
13	        ret
(gdb) next
_start () at hola64.s:21
21	        call  exit        # llamada a función
(gdb) next 
[Inferior 1 (process 3313) exited normally]
(gdb) q
josele@josele-VB:~/Escritorio/Practica 1 - EC-/pccito/1$ ls -la
total 236
drwxr-xr-x 2 josele josele  4096 oct  1 13:39 .
drwxrwxr-x 3 josele josele  4096 sep 25 11:53 ..
-rw-r--r-- 1 josele josele   310 sep 18 10:42 bug.cc
-rwxrwxr-x 1 josele josele  1216 oct  1 13:39 hola
-rwxrwxr-x 1 josele josele  1204 sep 25 13:16 hola32
-rw-rw-r-- 1 josele josele  1360 sep 25 13:16 hola32.o
-rwxrwxr-x 1 josele josele  1076 sep 25 13:24 hola32p
-rw-rw-r-- 1 josele josele  1260 sep 25 13:24 hola32p.o
-rw-r--r-- 1 josele josele   726 sep 18 10:42 hola32p.s
-rw-r--r-- 1 josele josele   611 sep 18 10:42 hola32.s
-rwxrwxr-x 1 josele josele  1680 sep 25 13:24 hola64
-rwxrwxr-x 1 josele josele  6864 sep 25 13:24 hola64-c
-rw-rw-r-- 1 josele josele  1984 sep 25 13:24 hola64-c.o
-rw-r--r-- 1 josele josele   371 sep 18 10:42 hola64-c.s
-rw-rw-r-- 1 josele josele  2040 sep 25 13:24 hola64.o
-rwxrwxr-x 1 josele josele  1488 sep 25 13:24 hola64p
-rw-rw-r-- 1 josele josele  1864 sep 25 13:24 hola64p.o
-rw-r--r-- 1 josele josele   849 sep 18 10:42 hola64p.s
-rw-r--r-- 1 josele josele   504 sep 18 10:42 hola64.s
-rwxrwxr-x 1 josele josele  9664 sep 25 13:08 hola-c
-rwxrwxr-x 1 josele josele 27576 sep 25 13:03 hola-c++
-rw-rw-r-- 1 josele josele  8229 sep 25 13:10 hola-c.att
-rw-r--r-- 1 josele josele    75 sep 18 10:42 hola-c.c
-rw-r--r-- 1 josele josele    93 sep 18 10:42 hola-c++.cc
-rw-rw-r-- 1 josele josele   992 oct  1 13:39 hola.o
lrwxrwxrwx 1 josele josele     8 sep 25 11:55 hola.s -> hola32.s
-rw-rw-r-- 1 josele josele   692 sep 25 13:07 kk
-rw-r--r-- 1 josele josele  1903 sep 18 10:42 makefile
-rwxrwxr-x 1 josele josele  8552 sep 25 12:25 minimo
-rw-r--r-- 1 josele josele    14 sep 18 10:42 minimo1.c
-rw-r--r-- 1 josele josele    25 sep 18 10:42 minimo2.c
-rw-r--r-- 1 josele josele    44 sep 18 10:42 minimo3.c
lrwxrwxrwx 1 josele josele     9 sep 25 11:55 minimo-c.c -> minimo1.c
lrwxrwxrwx 1 josele josele     9 sep 25 11:55 minimo-c++.cc -> minimo1.c
-rw-r--r-- 1 josele josele   764 sep 18 10:42 printf32e.s
-rw-r--r-- 1 josele josele   738 sep 18 10:42 printf32.s
-rwxrwxr-x 1 josele josele  6888 sep 25 13:24 printf64
-rw-rw-r-- 1 josele josele  2032 sep 25 13:24 printf64.o
-rw-r--r-- 1 josele josele   623 sep 18 10:42 printf64.s
-rwxrwxr-x 1 josele josele  9704 sep 25 13:24 printf-c-1
-rw-r--r-- 1 josele josele    84 sep 18 10:42 printf-c-1.c
-rwxrwxr-x 1 josele josele  9840 sep 25 13:24 printf-c-2
-rw-r--r-- 1 josele josele   109 sep 18 10:42 printf-c-2.c
lrwxrwxrwx 1 josele josele     6 sep 25 11:55 sum0.cc -> sum.cc
lrwxrwxrwx 1 josele josele     6 sep 25 11:55 sum1.cc -> sum.cc
lrwxrwxrwx 1 josele josele     6 sep 25 11:55 sum2.cc -> sum.cc
lrwxrwxrwx 1 josele josele     6 sep 25 11:55 sum3.cc -> sum.cc
-rw-r--r-- 1 josele josele  1046 sep 18 10:42 sum.cc
lrwxrwxrwx 1 josele josele     6 sep 25 11:55 sums.cc -> sum.cc
josele@josele-VB:~/Escritorio/Practica 1 - EC-/pccito/1$ nm printf-c-2.c
nm: printf-c-2.c: No se reconoce el formato del fichero
josele@josele-VB:~/Escritorio/Practica 1 - EC-/pccito/1$ nm printf-c-1.c
nm: printf-c-1.c: No se reconoce el formato del fichero
josele@josele-VB:~/Escritorio/Practica 1 - EC-/pccito/1$ objdump -d printf-c-1.c 
objdump: printf-c-1.c: No se reconoce el formato del fichero
josele@josele-VB:~/Escritorio/Practica 1 - EC-/pccito/1$ objdump -d printf-c-2.c 
objdump: printf-c-2.c: No se reconoce el formato del fichero
josele@josele-VB:~/Escritorio/Practica 1 - EC-/pccito/1$ gcc printf-c-
printf-c-1    printf-c-1.c  printf-c-2    printf-c-2.c  
josele@josele-VB:~/Escritorio/Practica 1 - EC-/pccito/1$ gcc printf-c-1.c -o printf1
josele@josele-VB:~/Escritorio/Practica 1 - EC-/pccito/1$ gcc printf-c-2.c -o printf2
josele@josele-VB:~/Escritorio/Practica 1 - EC-/pccito/1$ nm printf-c-2
0000000000601048 B __bss_start
0000000000601048 b completed.7585
0000000000601028 D __data_start
0000000000601028 W data_start
0000000000400460 t deregister_tm_clones
00000000004004e0 t __do_global_dtors_aux
0000000000600e18 t __do_global_dtors_aux_fini_array_entry
0000000000601030 D __dso_handle
0000000000600e28 d _DYNAMIC
0000000000601048 D _edata
0000000000601050 B _end
00000000004005c4 T _fini
0000000000601040 D formato
0000000000400500 t frame_dummy
0000000000600e10 t __frame_dummy_init_array_entry
0000000000400700 r __FRAME_END__
0000000000601000 d _GLOBAL_OFFSET_TABLE_
                 w __gmon_start__
00000000004005dc r __GNU_EH_FRAME_HDR
0000000000601038 D i
00000000004003c8 T _init
0000000000600e18 t __init_array_end
0000000000600e10 t __init_array_start
00000000004005d0 R _IO_stdin_used
                 w _ITM_deregisterTMCloneTable
                 w _ITM_registerTMCloneTable
0000000000600e20 d __JCR_END__
0000000000600e20 d __JCR_LIST__
                 w _Jv_RegisterClasses
00000000004005c0 T __libc_csu_fini
0000000000400550 T __libc_csu_init
                 U __libc_start_main@@GLIBC_2.2.5
0000000000400526 T main
                 U printf@@GLIBC_2.2.5
00000000004004a0 t register_tm_clones
0000000000400430 T _start
0000000000601048 D __TMC_END__
josele@josele-VB:~/Escritorio/Practica 1 - EC-/pccito/1$ nm printf2
0000000000601048 B __bss_start
0000000000601048 b completed.7585
0000000000601028 D __data_start
0000000000601028 W data_start
0000000000400460 t deregister_tm_clones
00000000004004e0 t __do_global_dtors_aux
0000000000600e18 t __do_global_dtors_aux_fini_array_entry
0000000000601030 D __dso_handle
0000000000600e28 d _DYNAMIC
0000000000601048 D _edata
0000000000601050 B _end
00000000004005c4 T _fini
0000000000601040 D formato
0000000000400500 t frame_dummy
0000000000600e10 t __frame_dummy_init_array_entry
0000000000400700 r __FRAME_END__
0000000000601000 d _GLOBAL_OFFSET_TABLE_
                 w __gmon_start__
00000000004005dc r __GNU_EH_FRAME_HDR
0000000000601038 D i
00000000004003c8 T _init
0000000000600e18 t __init_array_end
0000000000600e10 t __init_array_start
00000000004005d0 R _IO_stdin_used
                 w _ITM_deregisterTMCloneTable
                 w _ITM_registerTMCloneTable
0000000000600e20 d __JCR_END__
0000000000600e20 d __JCR_LIST__
                 w _Jv_RegisterClasses
00000000004005c0 T __libc_csu_fini
0000000000400550 T __libc_csu_init
                 U __libc_start_main@@GLIBC_2.2.5
0000000000400526 T main
                 U printf@@GLIBC_2.2.5
00000000004004a0 t register_tm_clones
0000000000400430 T _start
0000000000601048 D __TMC_END__
josele@josele-VB:~/Escritorio/Practica 1 - EC-/pccito/1$ nm printf1
0000000000601038 B __bss_start
0000000000601038 b completed.7585
0000000000601028 D __data_start
0000000000601028 W data_start
0000000000400460 t deregister_tm_clones
00000000004004e0 t __do_global_dtors_aux
0000000000600e18 t __do_global_dtors_aux_fini_array_entry
0000000000601030 D __dso_handle
0000000000600e28 d _DYNAMIC
0000000000601038 D _edata
0000000000601040 B _end
00000000004005c4 T _fini
0000000000400500 t frame_dummy
0000000000600e10 t __frame_dummy_init_array_entry
0000000000400700 r __FRAME_END__
0000000000601000 d _GLOBAL_OFFSET_TABLE_
                 w __gmon_start__
00000000004005dc r __GNU_EH_FRAME_HDR
00000000004003c8 T _init
0000000000600e18 t __init_array_end
0000000000600e10 t __init_array_start
00000000004005d0 R _IO_stdin_used
                 w _ITM_deregisterTMCloneTable
                 w _ITM_registerTMCloneTable
0000000000600e20 d __JCR_END__
0000000000600e20 d __JCR_LIST__
                 w _Jv_RegisterClasses
00000000004005c0 T __libc_csu_fini
0000000000400550 T __libc_csu_init
                 U __libc_start_main@@GLIBC_2.2.5
0000000000400526 T main
                 U printf@@GLIBC_2.2.5
00000000004004a0 t register_tm_clones
0000000000400430 T _start
0000000000601038 D __TMC_END__
josele@josele-VB:~/Escritorio/Practica 1 - EC-/pccito/1$ objdump -d printf-c-1 
printf-c-1:     formato del fichero elf64-x86-64


Desensamblado de la sección .init:

00000000004003c8 <_init>:
  4003c8:	48 83 ec 08          	sub    $0x8,%rsp
  4003cc:	48 8b 05 25 0c 20 00 	mov    0x200c25(%rip),%rax        # 600ff8 <_DYNAMIC+0x1d0>
  4003d3:	48 85 c0             	test   %rax,%rax
  4003d6:	74 05                	je     4003dd <_init+0x15>
  4003d8:	e8 43 00 00 00       	callq  400420 <__libc_start_main@plt+0x10>
  4003dd:	48 83 c4 08          	add    $0x8,%rsp
  4003e1:	c3                   	retq   

Desensamblado de la sección .plt:

00000000004003f0 <printf@plt-0x10>:
  4003f0:	ff 35 12 0c 20 00    	pushq  0x200c12(%rip)        # 601008 <_GLOBAL_OFFSET_TABLE_+0x8>
  4003f6:	ff 25 14 0c 20 00    	jmpq   *0x200c14(%rip)        # 601010 <_GLOBAL_OFFSET_TABLE_+0x10>
  4003fc:	0f 1f 40 00          	nopl   0x0(%rax)

0000000000400400 <printf@plt>:
  400400:	ff 25 12 0c 20 00    	jmpq   *0x200c12(%rip)        # 601018 <_GLOBAL_OFFSET_TABLE_+0x18>
  400406:	68 00 00 00 00       	pushq  $0x0
  40040b:	e9 e0 ff ff ff       	jmpq   4003f0 <_init+0x28>

0000000000400410 <__libc_start_main@plt>:
  400410:	ff 25 0a 0c 20 00    	jmpq   *0x200c0a(%rip)        # 601020 <_GLOBAL_OFFSET_TABLE_+0x20>
  400416:	68 01 00 00 00       	pushq  $0x1
  40041b:	e9 d0 ff ff ff       	jmpq   4003f0 <_init+0x28>

Desensamblado de la sección .plt.got:

0000000000400420 <.plt.got>:
  400420:	ff 25 d2 0b 20 00    	jmpq   *0x200bd2(%rip)        # 600ff8 <_DYNAMIC+0x1d0>
  400426:	66 90                	xchg   %ax,%ax

Desensamblado de la sección .text:

0000000000400430 <_start>:
  400430:	31 ed                	xor    %ebp,%ebp
  400432:	49 89 d1             	mov    %rdx,%r9
  400435:	5e                   	pop    %rsi
  400436:	48 89 e2             	mov    %rsp,%rdx
  400439:	48 83 e4 f0          	and    $0xfffffffffffffff0,%rsp
  40043d:	50                   	push   %rax
  40043e:	54                   	push   %rsp
  40043f:	49 c7 c0 c0 05 40 00 	mov    $0x4005c0,%r8
  400446:	48 c7 c1 50 05 40 00 	mov    $0x400550,%rcx
  40044d:	48 c7 c7 26 05 40 00 	mov    $0x400526,%rdi
  400454:	e8 b7 ff ff ff       	callq  400410 <__libc_start_main@plt>
  400459:	f4                   	hlt    
  40045a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)

0000000000400460 <deregister_tm_clones>:
  400460:	b8 3f 10 60 00       	mov    $0x60103f,%eax
  400465:	55                   	push   %rbp
  400466:	48 2d 38 10 60 00    	sub    $0x601038,%rax
  40046c:	48 83 f8 0e          	cmp    $0xe,%rax
  400470:	48 89 e5             	mov    %rsp,%rbp
  400473:	76 1b                	jbe    400490 <deregister_tm_clones+0x30>
  400475:	b8 00 00 00 00       	mov    $0x0,%eax
  40047a:	48 85 c0             	test   %rax,%rax
  40047d:	74 11                	je     400490 <deregister_tm_clones+0x30>
  40047f:	5d                   	pop    %rbp
  400480:	bf 38 10 60 00       	mov    $0x601038,%edi
  400485:	ff e0                	jmpq   *%rax
  400487:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
  40048e:	00 00 
  400490:	5d                   	pop    %rbp
  400491:	c3                   	retq   
  400492:	0f 1f 40 00          	nopl   0x0(%rax)
  400496:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  40049d:	00 00 00 

00000000004004a0 <register_tm_clones>:
  4004a0:	be 38 10 60 00       	mov    $0x601038,%esi
  4004a5:	55                   	push   %rbp
  4004a6:	48 81 ee 38 10 60 00 	sub    $0x601038,%rsi
  4004ad:	48 c1 fe 03          	sar    $0x3,%rsi
  4004b1:	48 89 e5             	mov    %rsp,%rbp
  4004b4:	48 89 f0             	mov    %rsi,%rax
  4004b7:	48 c1 e8 3f          	shr    $0x3f,%rax
  4004bb:	48 01 c6             	add    %rax,%rsi
  4004be:	48 d1 fe             	sar    %rsi
  4004c1:	74 15                	je     4004d8 <register_tm_clones+0x38>
  4004c3:	b8 00 00 00 00       	mov    $0x0,%eax
  4004c8:	48 85 c0             	test   %rax,%rax
  4004cb:	74 0b                	je     4004d8 <register_tm_clones+0x38>
  4004cd:	5d                   	pop    %rbp
  4004ce:	bf 38 10 60 00       	mov    $0x601038,%edi
  4004d3:	ff e0                	jmpq   *%rax
  4004d5:	0f 1f 00             	nopl   (%rax)
  4004d8:	5d                   	pop    %rbp
  4004d9:	c3                   	retq   
  4004da:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)

00000000004004e0 <__do_global_dtors_aux>:
  4004e0:	80 3d 51 0b 20 00 00 	cmpb   $0x0,0x200b51(%rip)        # 601038 <__TMC_END__>
  4004e7:	75 11                	jne    4004fa <__do_global_dtors_aux+0x1a>
  4004e9:	55                   	push   %rbp
  4004ea:	48 89 e5             	mov    %rsp,%rbp
  4004ed:	e8 6e ff ff ff       	callq  400460 <deregister_tm_clones>
  4004f2:	5d                   	pop    %rbp
  4004f3:	c6 05 3e 0b 20 00 01 	movb   $0x1,0x200b3e(%rip)        # 601038 <__TMC_END__>
  4004fa:	f3 c3                	repz retq 
  4004fc:	0f 1f 40 00          	nopl   0x0(%rax)

0000000000400500 <frame_dummy>:
  400500:	bf 20 0e 60 00       	mov    $0x600e20,%edi
  400505:	48 83 3f 00          	cmpq   $0x0,(%rdi)
  400509:	75 05                	jne    400510 <frame_dummy+0x10>
  40050b:	eb 93                	jmp    4004a0 <register_tm_clones>
  40050d:	0f 1f 00             	nopl   (%rax)
  400510:	b8 00 00 00 00       	mov    $0x0,%eax
  400515:	48 85 c0             	test   %rax,%rax
  400518:	74 f1                	je     40050b <frame_dummy+0xb>
  40051a:	55                   	push   %rbp
  40051b:	48 89 e5             	mov    %rsp,%rbp
  40051e:	ff d0                	callq  *%rax
  400520:	5d                   	pop    %rbp
  400521:	e9 7a ff ff ff       	jmpq   4004a0 <register_tm_clones>

0000000000400526 <main>:
  400526:	55                   	push   %rbp
  400527:	48 89 e5             	mov    %rsp,%rbp
  40052a:	48 83 ec 10          	sub    $0x10,%rsp
  40052e:	c7 45 fc 39 30 00 00 	movl   $0x3039,-0x4(%rbp)
  400535:	8b 45 fc             	mov    -0x4(%rbp),%eax
  400538:	89 c6                	mov    %eax,%esi
  40053a:	bf d4 05 40 00       	mov    $0x4005d4,%edi
  40053f:	b8 00 00 00 00       	mov    $0x0,%eax
  400544:	e8 b7 fe ff ff       	callq  400400 <printf@plt>
  400549:	b8 00 00 00 00       	mov    $0x0,%eax
  40054e:	c9                   	leaveq 
  40054f:	c3                   	retq   

0000000000400550 <__libc_csu_init>:
  400550:	41 57                	push   %r15
  400552:	41 56                	push   %r14
  400554:	41 89 ff             	mov    %edi,%r15d
  400557:	41 55                	push   %r13
  400559:	41 54                	push   %r12
  40055b:	4c 8d 25 ae 08 20 00 	lea    0x2008ae(%rip),%r12        # 600e10 <__frame_dummy_init_array_entry>
  400562:	55                   	push   %rbp
  400563:	48 8d 2d ae 08 20 00 	lea    0x2008ae(%rip),%rbp        # 600e18 <__init_array_end>
  40056a:	53                   	push   %rbx
  40056b:	49 89 f6             	mov    %rsi,%r14
  40056e:	49 89 d5             	mov    %rdx,%r13
  400571:	4c 29 e5             	sub    %r12,%rbp
  400574:	48 83 ec 08          	sub    $0x8,%rsp
  400578:	48 c1 fd 03          	sar    $0x3,%rbp
  40057c:	e8 47 fe ff ff       	callq  4003c8 <_init>
  400581:	48 85 ed             	test   %rbp,%rbp
  400584:	74 20                	je     4005a6 <__libc_csu_init+0x56>
  400586:	31 db                	xor    %ebx,%ebx
  400588:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
  40058f:	00 
  400590:	4c 89 ea             	mov    %r13,%rdx
  400593:	4c 89 f6             	mov    %r14,%rsi
  400596:	44 89 ff             	mov    %r15d,%edi
  400599:	41 ff 14 dc          	callq  *(%r12,%rbx,8)
  40059d:	48 83 c3 01          	add    $0x1,%rbx
  4005a1:	48 39 eb             	cmp    %rbp,%rbx
  4005a4:	75 ea                	jne    400590 <__libc_csu_init+0x40>
  4005a6:	48 83 c4 08          	add    $0x8,%rsp
  4005aa:	5b                   	pop    %rbx
  4005ab:	5d                   	pop    %rbp
  4005ac:	41 5c                	pop    %r12
  4005ae:	41 5d                	pop    %r13
  4005b0:	41 5e                	pop    %r14
  4005b2:	41 5f                	pop    %r15
  4005b4:	c3                   	retq   
  4005b5:	90                   	nop
  4005b6:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  4005bd:	00 00 00 

00000000004005c0 <__libc_csu_fini>:
  4005c0:	f3 c3                	repz retq 

Desensamblado de la sección .fini:

00000000004005c4 <_fini>:
  4005c4:	48 83 ec 08          	sub    $0x8,%rsp
  4005c8:	48 83 c4 08          	add    $0x8,%rsp
  4005cc:	c3                   	retq   
josele@josele-VB:~/Escritorio/Practica 1 - EC-/pccito/1$ objdump -d printf2

printf2:     formato del fichero elf64-x86-64


Desensamblado de la sección .init:

00000000004003c8 <_init>:
  4003c8:	48 83 ec 08          	sub    $0x8,%rsp
  4003cc:	48 8b 05 25 0c 20 00 	mov    0x200c25(%rip),%rax        # 600ff8 <_DYNAMIC+0x1d0>
  4003d3:	48 85 c0             	test   %rax,%rax
  4003d6:	74 05                	je     4003dd <_init+0x15>
  4003d8:	e8 43 00 00 00       	callq  400420 <__libc_start_main@plt+0x10>
  4003dd:	48 83 c4 08          	add    $0x8,%rsp
  4003e1:	c3                   	retq   

Desensamblado de la sección .plt:

00000000004003f0 <printf@plt-0x10>:
  4003f0:	ff 35 12 0c 20 00    	pushq  0x200c12(%rip)        # 601008 <_GLOBAL_OFFSET_TABLE_+0x8>
  4003f6:	ff 25 14 0c 20 00    	jmpq   *0x200c14(%rip)        # 601010 <_GLOBAL_OFFSET_TABLE_+0x10>
  4003fc:	0f 1f 40 00          	nopl   0x0(%rax)

0000000000400400 <printf@plt>:
  400400:	ff 25 12 0c 20 00    	jmpq   *0x200c12(%rip)        # 601018 <_GLOBAL_OFFSET_TABLE_+0x18>
  400406:	68 00 00 00 00       	pushq  $0x0
  40040b:	e9 e0 ff ff ff       	jmpq   4003f0 <_init+0x28>

0000000000400410 <__libc_start_main@plt>:
  400410:	ff 25 0a 0c 20 00    	jmpq   *0x200c0a(%rip)        # 601020 <_GLOBAL_OFFSET_TABLE_+0x20>
  400416:	68 01 00 00 00       	pushq  $0x1
  40041b:	e9 d0 ff ff ff       	jmpq   4003f0 <_init+0x28>

Desensamblado de la sección .plt.got:

0000000000400420 <.plt.got>:
  400420:	ff 25 d2 0b 20 00    	jmpq   *0x200bd2(%rip)        # 600ff8 <_DYNAMIC+0x1d0>
  400426:	66 90                	xchg   %ax,%ax

Desensamblado de la sección .text:

0000000000400430 <_start>:
  400430:	31 ed                	xor    %ebp,%ebp
  400432:	49 89 d1             	mov    %rdx,%r9
  400435:	5e                   	pop    %rsi
  400436:	48 89 e2             	mov    %rsp,%rdx
  400439:	48 83 e4 f0          	and    $0xfffffffffffffff0,%rsp
  40043d:	50                   	push   %rax
  40043e:	54                   	push   %rsp
  40043f:	49 c7 c0 c0 05 40 00 	mov    $0x4005c0,%r8
  400446:	48 c7 c1 50 05 40 00 	mov    $0x400550,%rcx
  40044d:	48 c7 c7 26 05 40 00 	mov    $0x400526,%rdi
  400454:	e8 b7 ff ff ff       	callq  400410 <__libc_start_main@plt>
  400459:	f4                   	hlt    
  40045a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)

0000000000400460 <deregister_tm_clones>:
  400460:	b8 4f 10 60 00       	mov    $0x60104f,%eax
  400465:	55                   	push   %rbp
  400466:	48 2d 48 10 60 00    	sub    $0x601048,%rax
  40046c:	48 83 f8 0e          	cmp    $0xe,%rax
  400470:	48 89 e5             	mov    %rsp,%rbp
  400473:	76 1b                	jbe    400490 <deregister_tm_clones+0x30>
  400475:	b8 00 00 00 00       	mov    $0x0,%eax
  40047a:	48 85 c0             	test   %rax,%rax
  40047d:	74 11                	je     400490 <deregister_tm_clones+0x30>
  40047f:	5d                   	pop    %rbp
  400480:	bf 48 10 60 00       	mov    $0x601048,%edi
  400485:	ff e0                	jmpq   *%rax
  400487:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
  40048e:	00 00 
  400490:	5d                   	pop    %rbp
  400491:	c3                   	retq   
  400492:	0f 1f 40 00          	nopl   0x0(%rax)
  400496:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  40049d:	00 00 00 

00000000004004a0 <register_tm_clones>:
  4004a0:	be 48 10 60 00       	mov    $0x601048,%esi
  4004a5:	55                   	push   %rbp
  4004a6:	48 81 ee 48 10 60 00 	sub    $0x601048,%rsi
  4004ad:	48 c1 fe 03          	sar    $0x3,%rsi
  4004b1:	48 89 e5             	mov    %rsp,%rbp
  4004b4:	48 89 f0             	mov    %rsi,%rax
  4004b7:	48 c1 e8 3f          	shr    $0x3f,%rax
  4004bb:	48 01 c6             	add    %rax,%rsi
  4004be:	48 d1 fe             	sar    %rsi
  4004c1:	74 15                	je     4004d8 <register_tm_clones+0x38>
  4004c3:	b8 00 00 00 00       	mov    $0x0,%eax
  4004c8:	48 85 c0             	test   %rax,%rax
  4004cb:	74 0b                	je     4004d8 <register_tm_clones+0x38>
  4004cd:	5d                   	pop    %rbp
  4004ce:	bf 48 10 60 00       	mov    $0x601048,%edi
  4004d3:	ff e0                	jmpq   *%rax
  4004d5:	0f 1f 00             	nopl   (%rax)
  4004d8:	5d                   	pop    %rbp
  4004d9:	c3                   	retq   
  4004da:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)

00000000004004e0 <__do_global_dtors_aux>:
  4004e0:	80 3d 61 0b 20 00 00 	cmpb   $0x0,0x200b61(%rip)        # 601048 <__TMC_END__>
  4004e7:	75 11                	jne    4004fa <__do_global_dtors_aux+0x1a>
  4004e9:	55                   	push   %rbp
  4004ea:	48 89 e5             	mov    %rsp,%rbp
  4004ed:	e8 6e ff ff ff       	callq  400460 <deregister_tm_clones>
  4004f2:	5d                   	pop    %rbp
  4004f3:	c6 05 4e 0b 20 00 01 	movb   $0x1,0x200b4e(%rip)        # 601048 <__TMC_END__>
  4004fa:	f3 c3                	repz retq 
  4004fc:	0f 1f 40 00          	nopl   0x0(%rax)

0000000000400500 <frame_dummy>:
  400500:	bf 20 0e 60 00       	mov    $0x600e20,%edi
  400505:	48 83 3f 00          	cmpq   $0x0,(%rdi)
  400509:	75 05                	jne    400510 <frame_dummy+0x10>
  40050b:	eb 93                	jmp    4004a0 <register_tm_clones>
  40050d:	0f 1f 00             	nopl   (%rax)
  400510:	b8 00 00 00 00       	mov    $0x0,%eax
  400515:	48 85 c0             	test   %rax,%rax
  400518:	74 f1                	je     40050b <frame_dummy+0xb>
  40051a:	55                   	push   %rbp
  40051b:	48 89 e5             	mov    %rsp,%rbp
  40051e:	ff d0                	callq  *%rax
  400520:	5d                   	pop    %rbp
  400521:	e9 7a ff ff ff       	jmpq   4004a0 <register_tm_clones>

0000000000400526 <main>:
  400526:	55                   	push   %rbp
  400527:	48 89 e5             	mov    %rsp,%rbp
  40052a:	8b 15 08 0b 20 00    	mov    0x200b08(%rip),%edx        # 601038 <i>
  400530:	48 8b 05 09 0b 20 00 	mov    0x200b09(%rip),%rax        # 601040 <formato>
  400537:	89 d6                	mov    %edx,%esi
  400539:	48 89 c7             	mov    %rax,%rdi
  40053c:	b8 00 00 00 00       	mov    $0x0,%eax
  400541:	e8 ba fe ff ff       	callq  400400 <printf@plt>
  400546:	b8 00 00 00 00       	mov    $0x0,%eax
  40054b:	5d                   	pop    %rbp
  40054c:	c3                   	retq   
  40054d:	0f 1f 00             	nopl   (%rax)

0000000000400550 <__libc_csu_init>:
  400550:	41 57                	push   %r15
  400552:	41 56                	push   %r14
  400554:	41 89 ff             	mov    %edi,%r15d
  400557:	41 55                	push   %r13
  400559:	41 54                	push   %r12
  40055b:	4c 8d 25 ae 08 20 00 	lea    0x2008ae(%rip),%r12        # 600e10 <__frame_dummy_init_array_entry>
  400562:	55                   	push   %rbp
  400563:	48 8d 2d ae 08 20 00 	lea    0x2008ae(%rip),%rbp        # 600e18 <__init_array_end>
  40056a:	53                   	push   %rbx
  40056b:	49 89 f6             	mov    %rsi,%r14
  40056e:	49 89 d5             	mov    %rdx,%r13
  400571:	4c 29 e5             	sub    %r12,%rbp
  400574:	48 83 ec 08          	sub    $0x8,%rsp
  400578:	48 c1 fd 03          	sar    $0x3,%rbp
  40057c:	e8 47 fe ff ff       	callq  4003c8 <_init>
  400581:	48 85 ed             	test   %rbp,%rbp
  400584:	74 20                	je     4005a6 <__libc_csu_init+0x56>
  400586:	31 db                	xor    %ebx,%ebx
  400588:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
  40058f:	00 
  400590:	4c 89 ea             	mov    %r13,%rdx
  400593:	4c 89 f6             	mov    %r14,%rsi
  400596:	44 89 ff             	mov    %r15d,%edi
  400599:	41 ff 14 dc          	callq  *(%r12,%rbx,8)
  40059d:	48 83 c3 01          	add    $0x1,%rbx
  4005a1:	48 39 eb             	cmp    %rbp,%rbx
  4005a4:	75 ea                	jne    400590 <__libc_csu_init+0x40>
  4005a6:	48 83 c4 08          	add    $0x8,%rsp
  4005aa:	5b                   	pop    %rbx
  4005ab:	5d                   	pop    %rbp
  4005ac:	41 5c                	pop    %r12
  4005ae:	41 5d                	pop    %r13
  4005b0:	41 5e                	pop    %r14
  4005b2:	41 5f                	pop    %r15
  4005b4:	c3                   	retq   
  4005b5:	90                   	nop
  4005b6:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  4005bd:	00 00 00 

00000000004005c0 <__libc_csu_fini>:
  4005c0:	f3 c3                	repz retq 

Desensamblado de la sección .fini:

00000000004005c4 <_fini>:
  4005c4:	48 83 ec 08          	sub    $0x8,%rsp
  4005c8:	48 83 c4 08          	add    $0x8,%rsp
  4005cc:	c3                   	retq   
josele@josele-VB:~/Escritorio/Practica 1 - EC-/pccito/1$ gedit printf32.s
josele@josele-VB:~/Escritorio/Practica 1 - EC-/pccito/1$ gedit printf32e.s
josele@josele-VB:~/Escritorio/Practica 1 - EC-/pccito/1$ gcc -nostdlib printf64.s -o printf64
/tmp/ccel6DSG.o: En la función `_start':
(.text+0x13): referencia a `printf' sin definir
/tmp/ccel6DSG.o: En la función `_start':
(.text+0x1b): referencia a `exit' sin definir
collect2: error: ld returned 1 exit status
josele@josele-VB:~/Escritorio/Practica 1 - EC-/pccito/1$ ls -l
total 244
-rw-r--r-- 1 josele josele   310 sep 18 10:42 bug.cc
-rwxrwxr-x 1 josele josele  1216 oct  1 13:39 hola
-rwxrwxr-x 1 josele josele  1204 sep 25 13:16 hola32
-rw-rw-r-- 1 josele josele  1360 sep 25 13:16 hola32.o
-rwxrwxr-x 1 josele josele  1076 sep 25 13:24 hola32p
-rw-rw-r-- 1 josele josele  1260 sep 25 13:24 hola32p.o
-rw-r--r-- 1 josele josele   726 sep 18 10:42 hola32p.s
-rw-r--r-- 1 josele josele   611 sep 18 10:42 hola32.s
-rwxrwxr-x 1 josele josele  1680 sep 25 13:24 hola64
-rwxrwxr-x 1 josele josele  6864 sep 25 13:24 hola64-c
-rw-rw-r-- 1 josele josele  1984 sep 25 13:24 hola64-c.o
-rw-r--r-- 1 josele josele   371 sep 18 10:42 hola64-c.s
-rw-rw-r-- 1 josele josele  2040 sep 25 13:24 hola64.o
-rwxrwxr-x 1 josele josele  1488 sep 25 13:24 hola64p
-rw-rw-r-- 1 josele josele  1864 sep 25 13:24 hola64p.o
-rw-r--r-- 1 josele josele   849 sep 18 10:42 hola64p.s
-rw-r--r-- 1 josele josele   504 sep 18 10:42 hola64.s
-rwxrwxr-x 1 josele josele  9664 sep 25 13:08 hola-c
-rwxrwxr-x 1 josele josele 27576 sep 25 13:03 hola-c++
-rw-rw-r-- 1 josele josele  8229 sep 25 13:10 hola-c.att
-rw-r--r-- 1 josele josele    75 sep 18 10:42 hola-c.c
-rw-r--r-- 1 josele josele    93 sep 18 10:42 hola-c++.cc
-rw-rw-r-- 1 josele josele   992 oct  1 13:39 hola.o
lrwxrwxrwx 1 josele josele     8 sep 25 11:55 hola.s -> hola32.s
-rw-rw-r-- 1 josele josele   692 sep 25 13:07 kk
-rw-r--r-- 1 josele josele  1903 sep 18 10:42 makefile
-rwxrwxr-x 1 josele josele  8552 sep 25 12:25 minimo
-rw-r--r-- 1 josele josele    14 sep 18 10:42 minimo1.c
-rw-r--r-- 1 josele josele    25 sep 18 10:42 minimo2.c
-rw-r--r-- 1 josele josele    44 sep 18 10:42 minimo3.c
lrwxrwxrwx 1 josele josele     9 sep 25 11:55 minimo-c.c -> minimo1.c
lrwxrwxrwx 1 josele josele     9 sep 25 11:55 minimo-c++.cc -> minimo1.c
-rwxrwxr-x 1 josele josele  8608 oct  1 13:55 printf1
-rwxrwxr-x 1 josele josele  8680 oct  1 13:55 printf2
-rw-r--r-- 1 josele josele   764 sep 18 10:42 printf32e.s
-rw-r--r-- 1 josele josele   738 sep 18 10:42 printf32.s
-rw-rw-r-- 1 josele josele  2032 sep 25 13:24 printf64.o
-rw-r--r-- 1 josele josele   623 sep 18 10:42 printf64.s
-rwxrwxr-x 1 josele josele  9704 sep 25 13:24 printf-c-1
-rw-r--r-- 1 josele josele    84 sep 18 10:42 printf-c-1.c
-rwxrwxr-x 1 josele josele  9840 sep 25 13:24 printf-c-2
-rw-r--r-- 1 josele josele   109 sep 18 10:42 printf-c-2.c
lrwxrwxrwx 1 josele josele     6 sep 25 11:55 sum0.cc -> sum.cc
lrwxrwxrwx 1 josele josele     6 sep 25 11:55 sum1.cc -> sum.cc
lrwxrwxrwx 1 josele josele     6 sep 25 11:55 sum2.cc -> sum.cc
lrwxrwxrwx 1 josele josele     6 sep 25 11:55 sum3.cc -> sum.cc
-rw-r--r-- 1 josele josele  1046 sep 18 10:42 sum.cc
lrwxrwxrwx 1 josele josele     6 sep 25 11:55 sums.cc -> sum.cc
josele@josele-VB:~/Escritorio/Practica 1 - EC-/pccito/1$ gcc printf64.o -o printf64
printf64.o: En la función `_start':
/home/josele/Escritorio/Practica 1 - EC-/pccito/1/printf64.s:15: definiciones múltiples de `_start'
/usr/lib/gcc/x86_64-linux-gnu/5/../../../x86_64-linux-gnu/crt1.o:(.text+0x0): primero se definió aquí
/usr/lib/gcc/x86_64-linux-gnu/5/../../../x86_64-linux-gnu/crt1.o: En la función `_start':
(.text+0x20): referencia a `main' sin definir
collect2: error: ld returned 1 exit status
josele@josele-VB:~/Escritorio/Practica 1 - EC-/pccito/1$ gedit printf64.s
josele@josele-VB:~/Escritorio/Practica 1 - EC-/pccito/1$ gcc -nostdlib -I printf64.s -o printf64
gcc: fatal error: no input files
compilation terminated.
josele@josele-VB:~/Escritorio/Practica 1 - EC-/pccito/1$ make printf64.s
make: No se hace nada para 'printf64.s'.
josele@josele-VB:~/Escritorio/Practica 1 - EC-/pccito/1$ gedit printf32.s
^Z                  
[1]+  Detenido                gedit printf32.s
josele@josele-VB:~/Escritorio/Practica 1 - EC-/pccito/1$ gedit printf64.s
^Z
[2]+  Detenido                gedit printf64.s
josele@josele-VB:~/Escritorio/Practica 1 - EC-/pccito/1$ g++ -O0 sum.cc -o sum
[1]-  Terminado (killed)      gedit printf32.s
josele@josele-VB:~/Escritorio/Practica 1 - EC-/pccito/1$ ls -la
total 264
drwxr-xr-x 2 josele josele  4096 oct  1 14:09 .
drwxrwxr-x 3 josele josele  4096 sep 25 11:53 ..
-rw-r--r-- 1 josele josele   310 sep 18 10:42 bug.cc
-rwxrwxr-x 1 josele josele  1216 oct  1 13:39 hola
-rwxrwxr-x 1 josele josele  1204 sep 25 13:16 hola32
-rw-rw-r-- 1 josele josele  1360 sep 25 13:16 hola32.o
-rwxrwxr-x 1 josele josele  1076 sep 25 13:24 hola32p
-rw-rw-r-- 1 josele josele  1260 sep 25 13:24 hola32p.o
-rw-r--r-- 1 josele josele   726 sep 18 10:42 hola32p.s
-rw-r--r-- 1 josele josele   611 sep 18 10:42 hola32.s
-rwxrwxr-x 1 josele josele  1680 sep 25 13:24 hola64
-rwxrwxr-x 1 josele josele  6864 sep 25 13:24 hola64-c
-rw-rw-r-- 1 josele josele  1984 sep 25 13:24 hola64-c.o
-rw-r--r-- 1 josele josele   371 sep 18 10:42 hola64-c.s
-rw-rw-r-- 1 josele josele  2040 sep 25 13:24 hola64.o
-rwxrwxr-x 1 josele josele  1488 sep 25 13:24 hola64p
-rw-rw-r-- 1 josele josele  1864 sep 25 13:24 hola64p.o
-rw-r--r-- 1 josele josele   849 sep 18 10:42 hola64p.s
-rw-r--r-- 1 josele josele   504 sep 18 10:42 hola64.s
-rwxrwxr-x 1 josele josele  9664 sep 25 13:08 hola-c
-rwxrwxr-x 1 josele josele 27576 sep 25 13:03 hola-c++
-rw-rw-r-- 1 josele josele  8229 sep 25 13:10 hola-c.att
-rw-r--r-- 1 josele josele    75 sep 18 10:42 hola-c.c
-rw-r--r-- 1 josele josele    93 sep 18 10:42 hola-c++.cc
-rw-rw-r-- 1 josele josele   992 oct  1 13:39 hola.o
lrwxrwxrwx 1 josele josele     8 sep 25 11:55 hola.s -> hola32.s
-rw-rw-r-- 1 josele josele   692 sep 25 13:07 kk
-rw-r--r-- 1 josele josele  1903 sep 18 10:42 makefile
-rwxrwxr-x 1 josele josele  8552 sep 25 12:25 minimo
-rw-r--r-- 1 josele josele    14 sep 18 10:42 minimo1.c
-rw-r--r-- 1 josele josele    25 sep 18 10:42 minimo2.c
-rw-r--r-- 1 josele josele    44 sep 18 10:42 minimo3.c
lrwxrwxrwx 1 josele josele     9 sep 25 11:55 minimo-c.c -> minimo1.c
lrwxrwxrwx 1 josele josele     9 sep 25 11:55 minimo-c++.cc -> minimo1.c
-rwxrwxr-x 1 josele josele  8608 oct  1 13:55 printf1
-rwxrwxr-x 1 josele josele  8680 oct  1 13:55 printf2
-rw-r--r-- 1 josele josele   764 sep 18 10:42 printf32e.s
-rw-r--r-- 1 josele josele   738 sep 18 10:42 printf32.s
-rw-rw-r-- 1 josele josele  2032 sep 25 13:24 printf64.o
-rw-r--r-- 1 josele josele   623 sep 18 10:42 printf64.s
-rwxrwxr-x 1 josele josele  9704 sep 25 13:24 printf-c-1
-rw-r--r-- 1 josele josele    84 sep 18 10:42 printf-c-1.c
-rwxrwxr-x 1 josele josele  9840 sep 25 13:24 printf-c-2
-rw-r--r-- 1 josele josele   109 sep 18 10:42 printf-c-2.c
-rwxrwxr-x 1 josele josele  8552 oct  1 14:09 sum
lrwxrwxrwx 1 josele josele     6 sep 25 11:55 sum0.cc -> sum.cc
lrwxrwxrwx 1 josele josele     6 sep 25 11:55 sum1.cc -> sum.cc
lrwxrwxrwx 1 josele josele     6 sep 25 11:55 sum2.cc -> sum.cc
lrwxrwxrwx 1 josele josele     6 sep 25 11:55 sum3.cc -> sum.cc
-rw-r--r-- 1 josele josele  1046 sep 18 10:42 sum.cc
lrwxrwxrwx 1 josele josele     6 sep 25 11:55 sums.cc -> sum.cc
josele@josele-VB:~/Escritorio/Practica 1 - EC-/pccito/1$ objdump -d sum

sum:     formato del fichero elf64-x86-64


Desensamblado de la sección .init:

0000000000400390 <_init>:
  400390:	48 83 ec 08          	sub    $0x8,%rsp
  400394:	48 8b 05 5d 0c 20 00 	mov    0x200c5d(%rip),%rax        # 600ff8 <_DYNAMIC+0x1d0>
  40039b:	48 85 c0             	test   %rax,%rax
  40039e:	74 05                	je     4003a5 <_init+0x15>
  4003a0:	e8 2b 00 00 00       	callq  4003d0 <__libc_start_main@plt+0x10>
  4003a5:	48 83 c4 08          	add    $0x8,%rsp
  4003a9:	c3                   	retq   

Desensamblado de la sección .plt:

00000000004003b0 <__libc_start_main@plt-0x10>:
  4003b0:	ff 35 52 0c 20 00    	pushq  0x200c52(%rip)        # 601008 <_GLOBAL_OFFSET_TABLE_+0x8>
  4003b6:	ff 25 54 0c 20 00    	jmpq   *0x200c54(%rip)        # 601010 <_GLOBAL_OFFSET_TABLE_+0x10>
  4003bc:	0f 1f 40 00          	nopl   0x0(%rax)

00000000004003c0 <__libc_start_main@plt>:
  4003c0:	ff 25 52 0c 20 00    	jmpq   *0x200c52(%rip)        # 601018 <_GLOBAL_OFFSET_TABLE_+0x18>
  4003c6:	68 00 00 00 00       	pushq  $0x0
  4003cb:	e9 e0 ff ff ff       	jmpq   4003b0 <_init+0x20>

Desensamblado de la sección .plt.got:

00000000004003d0 <.plt.got>:
  4003d0:	ff 25 22 0c 20 00    	jmpq   *0x200c22(%rip)        # 600ff8 <_DYNAMIC+0x1d0>
  4003d6:	66 90                	xchg   %ax,%ax

Desensamblado de la sección .text:

00000000004003e0 <_start>:
  4003e0:	31 ed                	xor    %ebp,%ebp
  4003e2:	49 89 d1             	mov    %rdx,%r9
  4003e5:	5e                   	pop    %rsi
  4003e6:	48 89 e2             	mov    %rsp,%rdx
  4003e9:	48 83 e4 f0          	and    $0xfffffffffffffff0,%rsp
  4003ed:	50                   	push   %rax
  4003ee:	54                   	push   %rsp
  4003ef:	49 c7 c0 70 05 40 00 	mov    $0x400570,%r8
  4003f6:	48 c7 c1 00 05 40 00 	mov    $0x400500,%rcx
  4003fd:	48 c7 c7 d6 04 40 00 	mov    $0x4004d6,%rdi
  400404:	e8 b7 ff ff ff       	callq  4003c0 <__libc_start_main@plt>
  400409:	f4                   	hlt    
  40040a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)

0000000000400410 <deregister_tm_clones>:
  400410:	b8 37 10 60 00       	mov    $0x601037,%eax
  400415:	55                   	push   %rbp
  400416:	48 2d 30 10 60 00    	sub    $0x601030,%rax
  40041c:	48 83 f8 0e          	cmp    $0xe,%rax
  400420:	48 89 e5             	mov    %rsp,%rbp
  400423:	76 1b                	jbe    400440 <deregister_tm_clones+0x30>
  400425:	b8 00 00 00 00       	mov    $0x0,%eax
  40042a:	48 85 c0             	test   %rax,%rax
  40042d:	74 11                	je     400440 <deregister_tm_clones+0x30>
  40042f:	5d                   	pop    %rbp
  400430:	bf 30 10 60 00       	mov    $0x601030,%edi
  400435:	ff e0                	jmpq   *%rax
  400437:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
  40043e:	00 00 
  400440:	5d                   	pop    %rbp
  400441:	c3                   	retq   
  400442:	0f 1f 40 00          	nopl   0x0(%rax)
  400446:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  40044d:	00 00 00 

0000000000400450 <register_tm_clones>:
  400450:	be 30 10 60 00       	mov    $0x601030,%esi
  400455:	55                   	push   %rbp
  400456:	48 81 ee 30 10 60 00 	sub    $0x601030,%rsi
  40045d:	48 c1 fe 03          	sar    $0x3,%rsi
  400461:	48 89 e5             	mov    %rsp,%rbp
  400464:	48 89 f0             	mov    %rsi,%rax
  400467:	48 c1 e8 3f          	shr    $0x3f,%rax
  40046b:	48 01 c6             	add    %rax,%rsi
  40046e:	48 d1 fe             	sar    %rsi
  400471:	74 15                	je     400488 <register_tm_clones+0x38>
  400473:	b8 00 00 00 00       	mov    $0x0,%eax
  400478:	48 85 c0             	test   %rax,%rax
  40047b:	74 0b                	je     400488 <register_tm_clones+0x38>
  40047d:	5d                   	pop    %rbp
  40047e:	bf 30 10 60 00       	mov    $0x601030,%edi
  400483:	ff e0                	jmpq   *%rax
  400485:	0f 1f 00             	nopl   (%rax)
  400488:	5d                   	pop    %rbp
  400489:	c3                   	retq   
  40048a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)

0000000000400490 <__do_global_dtors_aux>:
  400490:	80 3d 99 0b 20 00 00 	cmpb   $0x0,0x200b99(%rip)        # 601030 <__TMC_END__>
  400497:	75 11                	jne    4004aa <__do_global_dtors_aux+0x1a>
  400499:	55                   	push   %rbp
  40049a:	48 89 e5             	mov    %rsp,%rbp
  40049d:	e8 6e ff ff ff       	callq  400410 <deregister_tm_clones>
  4004a2:	5d                   	pop    %rbp
  4004a3:	c6 05 86 0b 20 00 01 	movb   $0x1,0x200b86(%rip)        # 601030 <__TMC_END__>
  4004aa:	f3 c3                	repz retq 
  4004ac:	0f 1f 40 00          	nopl   0x0(%rax)

00000000004004b0 <frame_dummy>:
  4004b0:	bf 20 0e 60 00       	mov    $0x600e20,%edi
  4004b5:	48 83 3f 00          	cmpq   $0x0,(%rdi)
  4004b9:	75 05                	jne    4004c0 <frame_dummy+0x10>
  4004bb:	eb 93                	jmp    400450 <register_tm_clones>
  4004bd:	0f 1f 00             	nopl   (%rax)
  4004c0:	b8 00 00 00 00       	mov    $0x0,%eax
  4004c5:	48 85 c0             	test   %rax,%rax
  4004c8:	74 f1                	je     4004bb <frame_dummy+0xb>
  4004ca:	55                   	push   %rbp
  4004cb:	48 89 e5             	mov    %rsp,%rbp
  4004ce:	ff d0                	callq  *%rax
  4004d0:	5d                   	pop    %rbp
  4004d1:	e9 7a ff ff ff       	jmpq   400450 <register_tm_clones>

00000000004004d6 <main>:
  4004d6:	55                   	push   %rbp
  4004d7:	48 89 e5             	mov    %rsp,%rbp
  4004da:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%rbp)
  4004e1:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
  4004e8:	83 7d fc 09          	cmpl   $0x9,-0x4(%rbp)
  4004ec:	7f 0c                	jg     4004fa <main+0x24>
  4004ee:	8b 45 fc             	mov    -0x4(%rbp),%eax
  4004f1:	01 45 f8             	add    %eax,-0x8(%rbp)
  4004f4:	83 45 fc 01          	addl   $0x1,-0x4(%rbp)
  4004f8:	eb ee                	jmp    4004e8 <main+0x12>
  4004fa:	8b 45 f8             	mov    -0x8(%rbp),%eax
  4004fd:	5d                   	pop    %rbp
  4004fe:	c3                   	retq   
  4004ff:	90                   	nop

0000000000400500 <__libc_csu_init>:
  400500:	41 57                	push   %r15
  400502:	41 56                	push   %r14
  400504:	41 89 ff             	mov    %edi,%r15d
  400507:	41 55                	push   %r13
  400509:	41 54                	push   %r12
  40050b:	4c 8d 25 fe 08 20 00 	lea    0x2008fe(%rip),%r12        # 600e10 <__frame_dummy_init_array_entry>
  400512:	55                   	push   %rbp
  400513:	48 8d 2d fe 08 20 00 	lea    0x2008fe(%rip),%rbp        # 600e18 <__init_array_end>
  40051a:	53                   	push   %rbx
  40051b:	49 89 f6             	mov    %rsi,%r14
  40051e:	49 89 d5             	mov    %rdx,%r13
  400521:	4c 29 e5             	sub    %r12,%rbp
  400524:	48 83 ec 08          	sub    $0x8,%rsp
  400528:	48 c1 fd 03          	sar    $0x3,%rbp
  40052c:	e8 5f fe ff ff       	callq  400390 <_init>
  400531:	48 85 ed             	test   %rbp,%rbp
  400534:	74 20                	je     400556 <__libc_csu_init+0x56>
  400536:	31 db                	xor    %ebx,%ebx
  400538:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
  40053f:	00 
  400540:	4c 89 ea             	mov    %r13,%rdx
  400543:	4c 89 f6             	mov    %r14,%rsi
  400546:	44 89 ff             	mov    %r15d,%edi
  400549:	41 ff 14 dc          	callq  *(%r12,%rbx,8)
  40054d:	48 83 c3 01          	add    $0x1,%rbx
  400551:	48 39 eb             	cmp    %rbp,%rbx
  400554:	75 ea                	jne    400540 <__libc_csu_init+0x40>
  400556:	48 83 c4 08          	add    $0x8,%rsp
  40055a:	5b                   	pop    %rbx
  40055b:	5d                   	pop    %rbp
  40055c:	41 5c                	pop    %r12
  40055e:	41 5d                	pop    %r13
  400560:	41 5e                	pop    %r14
  400562:	41 5f                	pop    %r15
  400564:	c3                   	retq   
  400565:	90                   	nop
  400566:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  40056d:	00 00 00 

0000000000400570 <__libc_csu_fini>:
  400570:	f3 c3                	repz retq 

Desensamblado de la sección .fini:

0000000000400574 <_fini>:
  400574:	48 83 ec 08          	sub    $0x8,%rsp
  400578:	48 83 c4 08          	add    $0x8,%rsp
  40057c:	c3                   	retq   
josele@josele-VB:~/Escritorio/Practica 1 - EC-/pccito/1$ g++ -O3 sum.cc -o sum
josele@josele-VB:~/Escritorio/Practica 1 - EC-/pccito/1$ objdump -d sum

sum:     formato del fichero elf64-x86-64


Desensamblado de la sección .init:

0000000000400390 <_init>:
  400390:	48 83 ec 08          	sub    $0x8,%rsp
  400394:	48 8b 05 5d 0c 20 00 	mov    0x200c5d(%rip),%rax        # 600ff8 <_DYNAMIC+0x1d0>
  40039b:	48 85 c0             	test   %rax,%rax
  40039e:	74 05                	je     4003a5 <_init+0x15>
  4003a0:	e8 2b 00 00 00       	callq  4003d0 <__libc_start_main@plt+0x10>
  4003a5:	48 83 c4 08          	add    $0x8,%rsp
  4003a9:	c3                   	retq   

Desensamblado de la sección .plt:

00000000004003b0 <__libc_start_main@plt-0x10>:
  4003b0:	ff 35 52 0c 20 00    	pushq  0x200c52(%rip)        # 601008 <_GLOBAL_OFFSET_TABLE_+0x8>
  4003b6:	ff 25 54 0c 20 00    	jmpq   *0x200c54(%rip)        # 601010 <_GLOBAL_OFFSET_TABLE_+0x10>
  4003bc:	0f 1f 40 00          	nopl   0x0(%rax)

00000000004003c0 <__libc_start_main@plt>:
  4003c0:	ff 25 52 0c 20 00    	jmpq   *0x200c52(%rip)        # 601018 <_GLOBAL_OFFSET_TABLE_+0x18>
  4003c6:	68 00 00 00 00       	pushq  $0x0
  4003cb:	e9 e0 ff ff ff       	jmpq   4003b0 <_init+0x20>

Desensamblado de la sección .plt.got:

00000000004003d0 <.plt.got>:
  4003d0:	ff 25 22 0c 20 00    	jmpq   *0x200c22(%rip)        # 600ff8 <_DYNAMIC+0x1d0>
  4003d6:	66 90                	xchg   %ax,%ax

Desensamblado de la sección .text:

00000000004003e0 <main>:
  4003e0:	b8 2d 00 00 00       	mov    $0x2d,%eax
  4003e5:	c3                   	retq   
  4003e6:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  4003ed:	00 00 00 

00000000004003f0 <_start>:
  4003f0:	31 ed                	xor    %ebp,%ebp
  4003f2:	49 89 d1             	mov    %rdx,%r9
  4003f5:	5e                   	pop    %rsi
  4003f6:	48 89 e2             	mov    %rsp,%rdx
  4003f9:	48 83 e4 f0          	and    $0xfffffffffffffff0,%rsp
  4003fd:	50                   	push   %rax
  4003fe:	54                   	push   %rsp
  4003ff:	49 c7 c0 60 05 40 00 	mov    $0x400560,%r8
  400406:	48 c7 c1 f0 04 40 00 	mov    $0x4004f0,%rcx
  40040d:	48 c7 c7 e0 03 40 00 	mov    $0x4003e0,%rdi
  400414:	e8 a7 ff ff ff       	callq  4003c0 <__libc_start_main@plt>
  400419:	f4                   	hlt    
  40041a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)

0000000000400420 <deregister_tm_clones>:
  400420:	b8 37 10 60 00       	mov    $0x601037,%eax
  400425:	55                   	push   %rbp
  400426:	48 2d 30 10 60 00    	sub    $0x601030,%rax
  40042c:	48 83 f8 0e          	cmp    $0xe,%rax
  400430:	48 89 e5             	mov    %rsp,%rbp
  400433:	76 1b                	jbe    400450 <deregister_tm_clones+0x30>
  400435:	b8 00 00 00 00       	mov    $0x0,%eax
  40043a:	48 85 c0             	test   %rax,%rax
  40043d:	74 11                	je     400450 <deregister_tm_clones+0x30>
  40043f:	5d                   	pop    %rbp
  400440:	bf 30 10 60 00       	mov    $0x601030,%edi
  400445:	ff e0                	jmpq   *%rax
  400447:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
  40044e:	00 00 
  400450:	5d                   	pop    %rbp
  400451:	c3                   	retq   
  400452:	0f 1f 40 00          	nopl   0x0(%rax)
  400456:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  40045d:	00 00 00 

0000000000400460 <register_tm_clones>:
  400460:	be 30 10 60 00       	mov    $0x601030,%esi
  400465:	55                   	push   %rbp
  400466:	48 81 ee 30 10 60 00 	sub    $0x601030,%rsi
  40046d:	48 c1 fe 03          	sar    $0x3,%rsi
  400471:	48 89 e5             	mov    %rsp,%rbp
  400474:	48 89 f0             	mov    %rsi,%rax
  400477:	48 c1 e8 3f          	shr    $0x3f,%rax
  40047b:	48 01 c6             	add    %rax,%rsi
  40047e:	48 d1 fe             	sar    %rsi
  400481:	74 15                	je     400498 <register_tm_clones+0x38>
  400483:	b8 00 00 00 00       	mov    $0x0,%eax
  400488:	48 85 c0             	test   %rax,%rax
  40048b:	74 0b                	je     400498 <register_tm_clones+0x38>
  40048d:	5d                   	pop    %rbp
  40048e:	bf 30 10 60 00       	mov    $0x601030,%edi
  400493:	ff e0                	jmpq   *%rax
  400495:	0f 1f 00             	nopl   (%rax)
  400498:	5d                   	pop    %rbp
  400499:	c3                   	retq   
  40049a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)

00000000004004a0 <__do_global_dtors_aux>:
  4004a0:	80 3d 89 0b 20 00 00 	cmpb   $0x0,0x200b89(%rip)        # 601030 <__TMC_END__>
  4004a7:	75 11                	jne    4004ba <__do_global_dtors_aux+0x1a>
  4004a9:	55                   	push   %rbp
  4004aa:	48 89 e5             	mov    %rsp,%rbp
  4004ad:	e8 6e ff ff ff       	callq  400420 <deregister_tm_clones>
  4004b2:	5d                   	pop    %rbp
  4004b3:	c6 05 76 0b 20 00 01 	movb   $0x1,0x200b76(%rip)        # 601030 <__TMC_END__>
  4004ba:	f3 c3                	repz retq 
  4004bc:	0f 1f 40 00          	nopl   0x0(%rax)

00000000004004c0 <frame_dummy>:
  4004c0:	bf 20 0e 60 00       	mov    $0x600e20,%edi
  4004c5:	48 83 3f 00          	cmpq   $0x0,(%rdi)
  4004c9:	75 05                	jne    4004d0 <frame_dummy+0x10>
  4004cb:	eb 93                	jmp    400460 <register_tm_clones>
  4004cd:	0f 1f 00             	nopl   (%rax)
  4004d0:	b8 00 00 00 00       	mov    $0x0,%eax
  4004d5:	48 85 c0             	test   %rax,%rax
  4004d8:	74 f1                	je     4004cb <frame_dummy+0xb>
  4004da:	55                   	push   %rbp
  4004db:	48 89 e5             	mov    %rsp,%rbp
  4004de:	ff d0                	callq  *%rax
  4004e0:	5d                   	pop    %rbp
  4004e1:	e9 7a ff ff ff       	jmpq   400460 <register_tm_clones>
  4004e6:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  4004ed:	00 00 00 

00000000004004f0 <__libc_csu_init>:
  4004f0:	41 57                	push   %r15
  4004f2:	41 56                	push   %r14
  4004f4:	41 89 ff             	mov    %edi,%r15d
  4004f7:	41 55                	push   %r13
  4004f9:	41 54                	push   %r12
  4004fb:	4c 8d 25 0e 09 20 00 	lea    0x20090e(%rip),%r12        # 600e10 <__frame_dummy_init_array_entry>
  400502:	55                   	push   %rbp
  400503:	48 8d 2d 0e 09 20 00 	lea    0x20090e(%rip),%rbp        # 600e18 <__init_array_end>
  40050a:	53                   	push   %rbx
  40050b:	49 89 f6             	mov    %rsi,%r14
  40050e:	49 89 d5             	mov    %rdx,%r13
  400511:	4c 29 e5             	sub    %r12,%rbp
  400514:	48 83 ec 08          	sub    $0x8,%rsp
  400518:	48 c1 fd 03          	sar    $0x3,%rbp
  40051c:	e8 6f fe ff ff       	callq  400390 <_init>
  400521:	48 85 ed             	test   %rbp,%rbp
  400524:	74 20                	je     400546 <__libc_csu_init+0x56>
  400526:	31 db                	xor    %ebx,%ebx
  400528:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
  40052f:	00 
  400530:	4c 89 ea             	mov    %r13,%rdx
  400533:	4c 89 f6             	mov    %r14,%rsi
  400536:	44 89 ff             	mov    %r15d,%edi
  400539:	41 ff 14 dc          	callq  *(%r12,%rbx,8)
  40053d:	48 83 c3 01          	add    $0x1,%rbx
  400541:	48 39 eb             	cmp    %rbp,%rbx
  400544:	75 ea                	jne    400530 <__libc_csu_init+0x40>
  400546:	48 83 c4 08          	add    $0x8,%rsp
  40054a:	5b                   	pop    %rbx
  40054b:	5d                   	pop    %rbp
  40054c:	41 5c                	pop    %r12
  40054e:	41 5d                	pop    %r13
  400550:	41 5e                	pop    %r14
  400552:	41 5f                	pop    %r15
  400554:	c3                   	retq   
  400555:	90                   	nop
  400556:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  40055d:	00 00 00 

0000000000400560 <__libc_csu_fini>:
  400560:	f3 c3                	repz retq 

Desensamblado de la sección .fini:

0000000000400564 <_fini>:
  400564:	48 83 ec 08          	sub    $0x8,%rsp
  400568:	48 83 c4 08          	add    $0x8,%rsp
  40056c:	c3                   	retq   
josele@josele-VB:~/Escritorio/Practica 1 - EC-/pccito/1$ 

